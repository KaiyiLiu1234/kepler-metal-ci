name: Equinix k8s Action

on:
  workflow_dispatch:
    inputs:
      termination_time:
        description: 'Cluster termination time in hours after now'
        required: true
        default: '1'

jobs:
  Create-k8s-cluster:
    name: "Create Cluster"
    runs-on: ubuntu-latest

    steps:
      - name: Validate termination time
        run: |
          if [ ${{ github.event.inputs.termination_time }} -gt 48 ]; then
            echo "Error: Termination time cannot be more than 48 hours."
            exit 1
          fi

      - name: Install ansible, git and jq
        run: |
          sudo apt-get update
          sudo apt-get install ansible jq git -y

      - name: Clone repo
        run: |
          git clone https://github.com/sustainable-computing-io/kepler-metal-ci

      - name: Save ssh key from env to file
        run: |
          mkdir -p ~/.ssh/
          echo "${{ secrets.EQUINIX_SSH_KEY }}" > ~/.ssh/kepler_ci
          chmod 600 ~/.ssh/kepler_ci
          echo "StrictHostKeyChecking no" >> ~/.ssh/config

      - name: Create metal config
        run: |
          cat <<EOF > /tmp/metal.yaml
          token: "${{ secrets.METAL_AUTH_TOKEN }}"
          project-id: ${{ secrets.EQUINIX_PROJECT_ID }}
          EOF

      - name: Play k8s_kubeadm.yml
        env:
          metro: "da"
          plan: "c3.small.x86"
          os: "rhel_9"
        run: |
          mkdir -p ~/.ansible
          echo '[defaults]' > ~/.ansible/ansible.cfg
          echo 'callback_plugins = ~/.github/callback_plugins' >> ~/.ansible/ansible.cfg
          echo 'callback_whitelist = mask_ip_callback' >> ~/.ansible/ansible.cfg
          mkdir -p ~/.github/callback_plugins
          cd kepler-metal-ci
          cp ansible/mask_ip_callback.py ~/.github/callback_plugins/mask_ip_callback.py

          ansible-playbook ansible/k8s_kubeadm.yml --extra-vars "termination_time=${{ github.event.inputs.termination_time }}" >> k8s_kubeadm.log
          sudo cat /tmp/kubeconfig |jq -r '.stdout' > /tmp/k8sconfig
          sudo mv /tmp/k8sconfig /tmp/kubeconfig

      - name: Upload kubeconfig
        uses: actions/upload-artifact@v2
        with:
          name: kubeconfig-${{ github.run_id }}
          path: /tmp/kubeconfig
          retention-days: 1

  Test-K8s:
    name: "Test K8s"
    needs: create-k8s-cluster
    runs-on: ubuntu-latest

    steps:
      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/v1.22.0/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: mkdir ~/.kube
        run: |
          mkdir -p ~/.kube

      - name: Download kubeconfig
        uses: actions/download-artifact@v2
        with:
          name: kubeconfig-${{ github.run_id }}
          path: ~/.kube/

      - name: Test k8s
        run: |
          ls -la ~/.kube/*
          mv ~/.kube/kubeconfig ~/.kube/config
          kubectl get nodes
          kubectl get pods --all-namespaces