---
- name: Install KVM and create VM
  hosts: kvm_hosts
  become: yes

  vars:
    vm_name: my-vm
    vm_disk_path: /var/lib/libvirt/images/my-vm.qcow2
    backup_vm_disk_path: /var/lib/libvirt/images/my-vm-bak.qcow2
    vm_image_url: https://cloud.centos.org/centos/9-stream/x86_64/images/CentOS-Stream-GenericCloud-9-latest.x86_64.qcow2
    vm_user: root
    vm_password: ansible_password
    ssh_key_path: /tmp/vm_ssh_key.pub
    cloud_init_config_path: /var/lib/libvirt/images/cloud_init_config.yml
    cloud_init_iso_path: /var/lib/libvirt/images/cloud_init.iso

  tasks:
    - name: Install KVM and create VM
      block:
        - name: Install libvirt packages
          yum:
            name:
              - libvirt
              - qemu-kvm
              - virt-install
              - qemu-img
              - cloud-init
              - guestfs-tools
              - python3-libvirt
            state: present

        - name: Start and enable libvirtd service
          service:
            name: libvirtd
            state: started
            enabled: yes

        - name: Create storage directory
          file:
            path: /var/lib/libvirt/images
            state: directory
            owner: qemu
            group: qemu
            mode: '0755'

        - name: Check if CentOS Stream 9 image exists
          stat:
            path: "{{ backup_vm_disk_path }}"
          register: image_stat

        - name: Download CentOS Stream 9 image
          get_url:
            url: "{{ vm_image_url }}"
            dest: "{{ backup_vm_disk_path }}"
          when: not image_stat.stat.exists

        - name: Copy the backup vm disk to become the VM disk
          command: cp "{{ backup_vm_disk_path }}" "{{ vm_disk_path }}"

        - name: Generate SSH key pair
          community.crypto.openssh_keypair:
            path: /tmp/vm_ssh_key
            type: rsa
            size: 2048
            state: present
          register: ssh_key

        - name: Save the public key into a file
          copy:
            content: "{{ ssh_key.public_key }}"
            dest: "{{ ssh_key_path }}"

        - name: Create cloud-init config
          template:
            src: cloud_init_config.yml.j2
            dest: "{{ cloud_init_config_path }}"
          vars:
            vm_ssh_public_key: "{{ ssh_key.public_key }}"

        - name: Generate cloud-init ISO
          command: >
            genisoimage -output "{{ cloud_init_iso_path }}" -V cidata -r -J  "{{ cloud_init_config_path }}" meta-data

        - name: Use virt-customize to inject ssh key
          command: >
            virt-customize -a "{{ vm_disk_path }}" --hostname {{ vm_name }} --uninstall cloud-init --selinux-relabel --root-password password:{{ vm_password }} --ssh-inject 'root:file:{{ ssh_key_path }}'

        - name: Create a VM
          community.libvirt.virt:
            name: "{{ vm_name }}"
            command: define
            xml: "{{ lookup('template', 'vm_template.xml.j2') }}"
            uri: qemu:///system

        - name: Start the VM
          community.libvirt.virt:
            name: "{{ vm_name }}"
            state: running
            uri: qemu:///system

        - name: Sleep 30 seconds to allow the VM to boot
          pause:
            seconds: 30

        - name: Get the VM IP address using virsh domifaddr
          shell: virsh -c qemu:///system domifaddr {{ vm_name }} | grep ipv4 | awk '{print $4}' | cut -d'/' -f1
          register: domifaddr_output

        - name: Parse the VM IP address
          set_fact:
            vm_ip: "{{ domifaddr_output.stdout }}"

        - name: Display the VM IP address
          debug:
            msg: "The IP address of the VM is {{ vm_ip }}"

        - name: Wait for VM to be reachable
          ansible.builtin.wait_for:
            host: "{{ vm_ip }}"
            port: 22
            delay: 10
            timeout: 60
          register: vm_reachable

        - name: Install Prometheus in the VM
          delegate_to: "{{ vm_ip }}"
          vars:
            ansible_user: "{{ vm_user }}"
            ansible_ssh_private_key_file: /tmp/vm_ssh_key
          block:
            - name: Install Prometheus
              dnf:
                name: prometheus
                state: present

            - name: Configure Prometheus
              template:
                src: templates/prometheus.yml.j2
                dest: /etc/prometheus/prometheus.yml

            - name: Start and enable Prometheus service
              service:
                name: prometheus
                state: started
                enabled: yes

      rescue:
        - name: Destroy the VM on error
          community.libvirt.virt:
            name: "{{ vm_name }}"
            state: destroyed
            uri: qemu:///system

        - name: Undefine the VM on error
          community.libvirt.virt:
            name: "{{ vm_name }}"
            command: undefine
            uri: qemu:///system


        - name: Fail the playbook
          fail:
            msg: "An error occurred during the playbook execution. The VM and its associated resources have been cleaned up."
