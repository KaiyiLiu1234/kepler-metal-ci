- name: Deploy Model Server
  hosts: model_server
  become: yes
  vars:
    compose_path: /tmp/model-server-docker-compose.yml
  tasks:
    - name: Check Podman Installed
      ansible.builtin.command: which podman
      register: podman_version
      ignore_errors: yes

    - name: Install Podman
      ansible.builtin.dnf:
        name: podman
        state: present
      when: podman_version.rc != 0

    - name: Check podman-docker Installed
      ansible.builtin.command: rpm -q podman-docker
      register: podman_docker_version
      ignore_errors: yes

    - name: Install podman-docker
      ansible.builtin.dnf:
        name: podman-docker
        state: present
      register: podman_docker_install
      changed_when: podman_docker_install.rc == 0
      failed_when: podman_docker_install.rc != 0
      when: podman_docker_version.rc != 0

    - name: Check Docker Compose Installed
      ansible.builtin.command: docker compose version
      register: docker_compose_version
      ignore_errors: yes

    - name: Install Docker Compose
      ansible.builtin.shell: |
        mkdir -p ~/.docker/cli-plugins
        curl -SL https://github.com/docker/compose/releases/download/v2.29.1/docker-compose-linux-x86_64 -o ~/.docker/cli-plugins/docker-compose
      register: install_docker_compose
      changed_when: install_docker_compose.rc == 0
      failed_when: install_docker_compose.rc != 0
      when: docker_compose_version.rc != 0

    - name: Apply Executable Docker Compose Permissions
      ansible.builtin.file:
        path: ~/.docker/cli-plugins/docker-compose
        mode: '0755'
        state: file
      #when: install_docker_compose.rc | default(1) == 0
      when: install_docker_compose.changed

    - name: Enable podman.socket
      ansible.builtin.systemd:
        name: podman.socket
        enabled: yes
        state: started

    - name: Create Docker Compose Model Server file
      copy:
        content: |
          version: '3.8'
          services:
            kepler:
              image: quay.io/sustainable_computing_io/kepler:latest
              container_name: kepler
              restart: always
              ports:
                - "8888:8888"
              privileged: true
              pid: "host"
              network_mode: "host"
              environment:
                - EXPOSE_ESTIMATED_IDLE_POWER_METRICS=true
                - ENABLE_PROCESS_METRICS=true
                - MODEL_CONFIG= |
                    NODE_TOTAL_ESTIMATOR={{ node_total_estimator }}
                    NODE_COMPONENTS_ESTIMATOR={{ node_components_estimator }}
                    NODE_TOTAL_INIT_URL={{ node_total_init_url }}
                    NODE_COMPONENTS_INIT_URL={{ node_components_init_url }} 
              volumes:
                - type: bind
                  source: /proc
                  target: /proc
                - type: bind
                  source: /sys
                  target: /sys
                - type: bind
                  source: /lib/modules
                  target: /lib/modules
                - type: bind
                  source: /usr/src
                  target: /usr/src
                - type: bind
                  source: /etc
                  target: /etc
                - kepler-tmp:/tmp
              cap_add:
                - ALL
              entrypoint:
                - /usr/bin/bash
                - -c
              command:
                - echo "Waiting for estimator socket";
                  until [[ -e /tmp/estimator.sock ]]; do
                  echo " ... waiting for socket";
                  sleep 1;
                  done;
                  echo "starting kepler";
                  set -x;
                  /usr/bin/kepler
                  -address="0.0.0.0:8888"
                  -v="8"
            estimator:
              entrypoint:
                - python3.8
              command:
                - -u
                - src/estimate/estimator.py
              image: quay.io/sustainable_computing_io/kepler_model_server:v0.7.7
              volumes:
                - estimator-mnt:/mnt
                - kepler-tmp:/tmp
              network_mode: "host"
              environment:
                - MODEL_CONFIG= |
                    NODE_TOTAL_ESTIMATOR={{ node_total_estimator }}
                    NODE_COMPONENTS_ESTIMATOR={{ node_components_estimator }}
                    NODE_TOTAL_INIT_URL={{ node_total_init_url }}
                    NODE_COMPONENTS_INIT_URL={{ node_components_init_url }} 
            model-server:
              entrypoint:
                - python3.8
              ports:
                - 8100
              command:
                - -u
                - src/server/model_server.py
              image: quay.io/sustainable_computing_io/kepler_model_server:v0.7.7
              volumes:
                - model-server-mnt:/mnt
              network_mode: "host"
              environment:
                - MODEL_CONFIG= |
                    NODE_TOTAL_ESTIMATOR={{ node_total_estimator }}
                    NODE_COMPONENTS_ESTIMATOR={{ node_components_estimator }}
                    NODE_TOTAL_INIT_URL={{ node_total_init_url }}
                    NODE_COMPONENTS_INIT_URL={{ node_components_init_url }} 
          volumes:
            kepler-tmp:
            estimator-mnt:
            model-server-mnt:
        dest: "{{ compose_path }}"

    - name: Check Docker Compose file
      ansible.builtin.command: cat {{ compose_path }}
      register: docker_compose_file

    - name: Output Docker Compose file
      ansible.builtin.debug:
        var: docker_compose_file.stdout

    - name: Pull Images
      ansible.builtin.command:
        cmd: docker compose -f {{ compose_path }} pull
        chdir: "{{ compose_path | dirname }}"
      register: compose_pull
      changed_when: compose_pull.rc == 0
      failed_when: compose_pull.rc != 0

    - name: Force Rebuild Docker Compose
      ansible.builtin.command:
        cmd: docker compose -f {{ compose_path }} up --force-recreate -d
        chdir: "{{ compose_path | dirname }}"
      register: deploy_output
      changed_when: deploy_output.rc == 0
      failed_when: deploy_output.rc != 0
      when: compose_pull.changed
        
    - name: Check if Model Server is being used
      ansible.builtin.shell: |
        for i in {1..10}; do
          echo "Checking Model Server in use. Attempt $i"
          if docker compose -f {{ compose_path }} logs | grep "Using the EstimatorSidecar"; then
            echo "In Use"
            exit 0
          fi
          sleep 10
        done
        echo "Model Server Estimator not in use"
        exit 1
      register: model_server_start
      failed_when: model_server_start.rc != 0

    - name: Output result
      ansible.builtin.debug:
        var: model_server_start.stdout_lines

    - name: Check if Kepler is active
      ansible.builtin.shell: |
        for i in {1..5}; do
          echo "Attempt $i"
          ret=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8888/metrics --max-time 10 --connect-timeout 10 || true)
          if [ ${ret} -eq 200 ]; then
            exit 0
          fi
          sleep 5
        done
        echo "Kepler did not start in time"
        exit 1
      register: kepler_start
      failed_when: kepler_start.rc != 0

    - name: Output result
      ansible.builtin.debug:
        var: kepler_start.stdout_lines

    - name: wait
      ansible.builtin.pause:
        seconds: 60
        
